/* Copyright 2009 Fog Creek Software, Inc. */

using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Data;

/* FogBugz namespaces-- make sure you add the neccesary assembly references to
 * DLL files contained in C:\Program Files\FogBugz\website\bin\ */
using FogCreek.FogBugz;
using FogCreek.FogBugz.Plugins;
using FogCreek.FogBugz.Plugins.Api;
using FogCreek.FogBugz.Plugins.Interfaces;
using FogCreek.FogBugz.UI;
using FogCreek.FogBugz.Database;

namespace IPluginRawPageDisplay_AJAX_Example
{
    /* Class Declaration: Inherit from Plugin, implement IPluginDatabase, etc */
    public abstract class IPluginRawPageDisplay_AJAX_Example : Plugin, IPluginDatabase, IPluginPageDisplay,
        IPluginRawPageDisplay, IPluginExtrasMenu
    {
        public const int pluginSchemaVersion = 1;
        
        /* Constructor: We'll just initialize the inherited Plugin class, which 
         * takes the passed instance of CPluginApi and sets its "api" member variable. */
        public IPluginRawPageDisplay_AJAX_Example(CPluginApi api)
            : base(api)
        {
        }

        #region IPluginDatabase Members

        public CTable[] DatabaseSchema()
        {
            /* Our schema consists of a "Kiwi" table and a "Zoo" table. */
            
            CTable kiwiTable = api.Database.NewTable(api.Database.PluginTableName("Kiwi"));
            kiwiTable.sDesc = "A table full of kiwis.";
            kiwiTable.AddAutoIncrementPrimaryKey("ixKiwi");
            kiwiTable.AddTextColumn("sKiwiFullName", "The full name of the kiwi.");
            kiwiTable.AddIntColumn("ixZoo", false);          
            kiwiTable.AddDateColumn("dtDateOfBirth", false, "The kiwi's date of birth.");
            
            CTable zooTable = api.Database.NewTable(api.Database.PluginTableName("Zoo"));
            zooTable.sDesc = "A table of zoos.";
            zooTable.AddAutoIncrementPrimaryKey("ixZoo");
            zooTable.AddTextColumn("sZooName", "The name of the zoo.");

            return new CTable[] { kiwiTable , zooTable};
        }

        public int DatabaseSchemaVersion()
        {
            return pluginSchemaVersion;
        }
        
        public void DatabaseUpgradeAfter(int ixVersionFrom, int ixVersionTo, 
            CDatabaseUpgradeApi apiUpgrade)
        {            
            /* Populate our zoo table with a few zoos */

            string[] zoos = {"San Diego", "Pittsburgh", "Bronx", "London" };

            for (int i = 0; i < zoos.Length; i++)
            {
                CInsertQuery iq = api.Database.NewInsertQuery(
                    api.Database.PluginTableName("Zoo"));

                iq.InsertString("sZooName", zoos[i]);                   
                iq.Execute();
            }      
        }

        public void DatabaseUpgradeBefore(int ixVersionFrom, int ixVersionTo, 
            CDatabaseUpgradeApi apiUpgrade)
        {

        }

        #endregion



        #region IPluginPageDisplay Members

        public string PageDisplay()
        {
            string sHTML = "";
            sHTML += GetHeader();
            sHTML += GetForm();
            sHTML += GetJavascript();
            sHTML += @"<div id=""dataDiv"">";
            sHTML +=    GetKiwis();
            sHTML += @"</div>";
            return sHTML;
        }

        public PermissionLevel PageVisibility()
        {
            /* We'll let all logged-in users with "normal" and "admin" permissions access
             * this page. */

            return PermissionLevel.Normal;
        }

        #endregion

        protected string GetHeader()
        {
            /* Generate an informational header, making use of the FogBugz UI library,
             * and grabbing this page's URL from the plugin API. */

            return String.Format(
                @"<p>{0}</p>
                  <p>
                      This page, generated by the <b>IPluginPageDisplay</b>
                      interface, demonstrates how the <b>IPluginRawPageDisplay</b> interface
                      can be used to to serve AJAX requests.
                  </p>     
                  <p>
                      This is a more advanced version of the example plugin for
                      <b>IPluginDatabase</b>. It adds new kiwis and refreshes
                      the list using an AJAX request rather than implementing
                      a form POST that requires a page reload. 
                  </p>",

                FogCreek.FogBugz.UI.PageDisplay.Headline("Adopt a Kiwi"));
        }

        protected string GetForm()
        {
            /* Use dictionaries to create custom attributes for the standard FogBugz form
             * elements available through FogCreek.FogBugz.UI */

            Dictionary<string, string> nameAttr = new Dictionary<string, string>();
            nameAttr.Add("id", "kiwiName");
            
            Dictionary<string, string> submitAttr = new Dictionary<string, string>();
            submitAttr.Add("onclick", "javascript:insertKiwi();");
            
            return String.Format(
                @"<div>
                        <p>Add a Kiwi to your collection!</p>
                        <p>&nbsp;</p>
                        <p>
                            <b>Kiwi Name:</b> {0}&nbsp;&nbsp;
                            <b>Zoo:</b> {1}&nbsp;&nbsp;
                            {2} Record Birth&nbsp;&nbsp;&nbsp;{3}
                        </p>
                </div>",

                Forms.TextInput("kiwiName", "",nameAttr),
                GetZooSelect(),
                Forms.CheckboxInput("kiwiRecDate", "true", true, null, "kiwiRecDate"),
                Forms.SubmitButton("idSubmit", "Add Kiwi", submitAttr)
                );
        }
        
        
        protected string GetZooSelect()
        {
            string[] zooNames = null;
            string[] zooIxs = null;
            
            CSelectQuery sq = api.Database.NewSelectQuery(
                api.Database.PluginTableName("Zoo"));
            
            sq.AddSelect("*");

            /* Iterate through the data set and populate the drop-down */
            DataSet ds = sq.GetDataSet();

            if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            {
                zooNames = new string[ds.Tables[0].Rows.Count];
                zooIxs = new string[ds.Tables[0].Rows.Count];

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    zooNames[i] = ds.Tables[0].Rows[i]["sZooName"].ToString();
                    zooIxs[i] = ds.Tables[0].Rows[i]["ixZoo"].ToString();
                }

                Dictionary<string, string> zooAttr = new Dictionary<string, string>();
                zooAttr.Add("id", "kiwiZoo");
                
                return Forms.SelectInput("kiwiZoo",
                    zooNames, zooNames[0], zooIxs, zooAttr);
            }
            else return String.Empty;
        }

        protected string GetJavascript()
        {
            /* IMPORTANT NOTE: The plugin prefix must be preprended to every
             * argument placed in the querystring of the AJAX request. */

            string fullAjaxUrl = api.Url.PluginRawPageUrl() + 
                String.Format("&{0}kiwiName=' + kiwiName + '&{0}kiwiZoo='+ kiwiZoo + '&{0}kiwiRecDate=' + kiwiRecDate + '&{0}action=addKiwi&{0}data=kiwiList&{0}actionToken={1}", 
                api.PluginPrefix,
                api.Security.GetActionToken("addKiwi"));

            /* When generating javascript, it's good practice to use multiline
             * string literals and nicely formatted code. This makes it easy
             * to interpret the syntax and debug on the client side. 
             * 
             * Also, note that the jquery library (v 1.3.1) is available
             * for use in javascript sent along with a page generated
             * by the IPluginPageDisplay interface.
             */
            
            return @"<script type='text/javascript'>
                        function kiwiListFn(sHTML, status)
                        {
                            $('div#dataDiv').html(sHTML);
                        }
                            
                        function insertKiwi()
                        {
                            var kiwiName = $('#kiwiName').val();
                            var kiwiZoo = $('#kiwiZoo').val();
                            var kiwiRecDate = $('#kiwiRecDate').is(':checked');
                            var url = '" + fullAjaxUrl + @"';
                            jQuery.get(url, kiwiListFn);
                        }
                   </script>";
        }

        
        protected void InsertKiwi()
        {
            /* No need to use the plugin prefix when checking the request object */

            if (api.Request[api.AddPluginPrefix("kiwiRecDate")] == null ||
                api.Request[api.AddPluginPrefix("kiwiZoo")] == null)
                return;
            
            string sKiwiName = Convert.ToString(api.Request[api.AddPluginPrefix("kiwiName")]);
            int ixKiwiZoo = Convert.ToInt32(api.Request[api.AddPluginPrefix("kiwiZoo")]);
            
            /* Use the plugin api to get a CInsertQuery instance. Notice that
             * the table is given a unique prefix by FogBugz, and 
             * Database.PluginTableName returns us the full name. */
            
            CInsertQuery iq = api.Database.NewInsertQuery(
                api.Database.PluginTableName("Kiwi"));

            iq.InsertString("sKiwiFullName", sKiwiName);
            iq.InsertInt("ixZoo", ixKiwiZoo);

            /* If there's a birth date, insert it in UTC using the plugin API */
            
            if (api.Request[api.AddPluginPrefix("kiwiRecDate")] != null &&
                Convert.ToBoolean(api.Request[api.AddPluginPrefix("kiwiRecDate")]))
                iq.InsertDate("dtDateOfBirth", api.TimeZone.UTCFromSTZ(DateTime.Now));                
            
            iq.Execute();
        }
        
        /* The GetKiwis function returns HTML to be placed inside our "dataDiv."
         * Note that this single function can be used by both the IPluginPageDisplay
         * implementation (to show the list of kiwis when the page is loaded) and
         * the IPluginRawPageDisplay implementation (to return an updated list of
         * kiwis when handling an AJAX request). */
        
        protected string GetKiwis()
        {   
            CSelectQuery sq = api.Database.NewSelectQuery(
                api.Database.PluginTableName("Kiwi"));
            
            
            sq.AddLeftJoin(api.Database.PluginTableName("Zoo"), 
                api.Database.PluginTableName("Kiwi") + ".ixZoo = " + 
                api.Database.PluginTableName("Zoo") + ".ixZoo");
            sq.AddSelect("*");

            /* Iterate through the data set and display our kiwis in the table */
            
            DataSet ds = sq.GetDataSet();

            string sHTML = @"<table cellpadding=""2"" cellspacing=""0"">
                                <tr style=""background-color:#e9f0f6; font-weight:bold;"">
                                  <td width=""50""><b>Kiwi</b></td>
                                  <td width=""200""><b>Full Name</b></td>
                                  <td width=""200""><b>Date of Birth</b></td>
                                  <td width=""200""><b>Zoo of Residence</b></td>
                                </tr>";

            if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    sHTML += "<tr><td>";
                    sHTML += ds.Tables[0].Rows[i]["ixKiwi"].ToString();
                    sHTML += "</td><td>";
                    sHTML += HttpUtility.HtmlEncode(
                        ds.Tables[0].Rows[i]["sKiwiFullName"].ToString());
                    sHTML += "</td><td>";
                    
                    if (ds.Tables[0].Rows[i]["dtDateOfBirth"] != DBNull.Value)
                        sHTML += HttpUtility.HtmlEncode(
                            api.TimeZone.CTZFromUTC(
                            Convert.ToDateTime(ds.Tables[0].
                            Rows[i]["dtDateOfBirth"])).ToString());
                        
                    sHTML += "</td><td>";
                    sHTML += HttpUtility.HtmlEncode(
                        ds.Tables[0].Rows[i]["sZooName"].ToString());
                    sHTML += "</td></tr>";

                }
            }
            else
                sHTML += @"<tr>
                              <td colspan='4' style=""text-align:center; color:gray;"">
                                  <i>No Kiwis yet, add one now!</i>
                              </td>
                           </tr>";

            ds.Dispose();

            sHTML += "</table>";
            return sHTML;

        }


        #region IPluginExtrasMenu Members

        public CNavMenuLink[] ExtrasMenuLinks()
        {
            /* Create a link to this plugin's page in the "Extras" menu. Only show the link
             * to normal and administrator users */

            if (api.Person.GetCurrentPerson().GetPermissionLevel() >= PermissionLevel.Normal)
            {
                return new CNavMenuLink[] {
                    new CNavMenuLink("Adopt a Kiwi!",api.Url.PluginPageUrl())
                };
            }
            else
                return new CNavMenuLink[] { };
        }

        #endregion

        #region IPluginRawPageDisplay Members

        public string RawPageDisplay()
        {
            if (api.Request[api.AddPluginPrefix("action")] != null &&
                Convert.ToString(api.Request[api.AddPluginPrefix("action")]) == "addKiwi")
            {
                // make sure the request includes a valid action token
                if ((api.Request[api.AddPluginPrefix("actionToken")] == null) ||
                    !api.Security.ValidateActionToken(api.Request[api.AddPluginPrefix("actionToken")],
                                                          "addKiwi"))
                {
                    return "action token invalid";
                }
                else
                {
                    InsertKiwi();
                }

            }

            if (api.Request[api.AddPluginPrefix("data")] == "kiwiList")
            {
                return GetKiwis();
            }
            else return "command not recognized";
        }

        public PermissionLevel RawPageVisibility()
        {
            return PermissionLevel.Normal;
        }

        #endregion
    }
}